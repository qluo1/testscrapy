{
  "name": "flight",
  "description": "Clientside component infrastructure",
  "main": "lib/index.js",
  "version": "1.0.7",
  "dependencies": {
    "es5-shim": "git://github.com/kriskowal/es5-shim.git#2.0.0",
    "jquery": "1.8.3"
  },
  "gitHead": "907703d26ca90d2b32cd686b9b864ec26df2352d",
  "readme": "#Flight: an event-driven web application framework\r\n\r\n[![Build Status](https://travis-ci.org/twitter/flight.png?branch=master)](http://travis-ci.org/twitter/flight)\r\n\r\nFlight is a lightweight, component-based JavaScript framework that maps behavior to DOM\r\nnodes. Twitter uses it for their web applications.\r\n\r\nComponents cannot be directly referenced, instead they communicate by triggering and subscribing to events.\r\nConsequently every component, and every component API, is entirely decoupled from every other component, so\r\nthat components are highly portable and easily testable.\r\n\r\nAs an added bonus, Flight includes a simple and safe mixin infrastructure allowing components to be easily\r\nextended with minimal boilerplate.\r\n\r\n**[Follow us on Twitter](https://twitter.com/flight)**  \r\n**[Visit our Google Group](https://groups.google.com/forum/?fromgroups#!forum/twitter-flight)**\r\n\r\n## Sample App\r\n\r\nBy way of example, we've included a simple email client built over the Flight framework. The source code for this\r\napp is in the [demo](https://github.com/twitter/flight/tree/gh-pages/demo) directory and you can run the demo [here](http://twitter.github.com/flight/demo/).\r\n\r\n## Browser Support\r\n\r\nFlight has been tested on all major browsers: Chrome, Firefox, Safari, Opera and IE7 and upwards.\r\n\r\n## Installation\r\n\r\nTo ensure Flight is installed with the correct dependencies, we recommend using [bower](https://github.com/twitter/bower).\r\nYour client app will need a `component.json` file that looks something like this:\r\n\r\n    {\r\n      \"name\": \"myApp\",\r\n      \"version\": \"1.2.1\",\r\n      \"dependencies\": {\r\n        \"flight\": \"~1.0.0\"\r\n      }\r\n    }\r\n\r\nThen running `bower install` will add flight to the `components` directory of `myApp`.\r\n\r\nAlternatively, if you don't want to load Flight via a script loader, simply download and\r\ninclude the [standalone version](http://twitter.github.com/flight/flight.js) using a regular\r\nscript tag then refer to [Using the standalone version](#using-the-standalone-version).\r\n\r\n## Dependencies\r\n\r\nFlight uses [ES5-shim](https://github.com/kriskowal/es5-shim) to polyfill ES5 support for older browsers and [jQuery](http://jquery.com)\r\nfor DOM manipulation API. If you install flight with bower, these apps will be deployed in the `components`\r\nfolder. Additionally you will need to include an AMD implementation such as [require.js](http://requirejs.org/)\r\nor [loadrunner](https://github.com/danwrong/loadrunner).\r\n\r\nThese files are loaded in the sample app at `demo/index.html`.\r\n\r\n```html\r\n<script src='components/jquery/jquery.js'></script>\r\n<script src='components/es5-shim/es5-shim.js'></script>\r\n<script src='components/es5-shim/es5-sham.js'></script>\r\n<script data-main=\"requireMain.js\" src='components/requirejs/require.js'></script>\r\n```\r\n\r\n## How do I use it?\r\n\r\n1.  Define a component\r\n2.  Attach a component instance to a DOM node\r\n\r\n## Components\r\n\r\n### What is a component?\r\n\r\n- A Component is nothing more than a constructor with properties mixed into its prototype.\r\n- Every Component comes with a set of basic functionality such as event handling and component registration.\r\n- Additionally, each Component definition mixes in a set of custom properties which describe its behavior.\r\n- When a component is attached to a DOM node, a new instance of that component is created. Each component\r\ninstance references the DOM node via its `node` property.\r\n- Component instances cannot be referenced directly; they communicate with other components via events.\r\n\r\n### How do I define a component?\r\n\r\nFlight expects its client apps to support [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD)-style module definitions.\r\n\r\nTo define a component, create a module that depends on Flight's component module (`lib/component.js`). The\r\nlatter module exports a function which we'll call `defineComponent`.\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'components/flight/lib/component'\r\n  ],\r\n\r\n  function(defineComponent) {\r\n    //..\r\n  }\r\n);\r\n```\r\n\r\n`defineComponent` accepts any number of [mixin](#mixins) functions and returns a new Component constructor\r\nwith those mixins applied to its prototype.\r\n\r\n<a name=\"core_mixin\"></a>Each Component definition should include a function declaration describing its\r\nbasic behavior (we can think of this function as the Component's core mixin). By passing this function to\r\n`defineComponent` we can define a simple Component:\r\n\r\n```js\r\n/* mySimpleComponent.js */\r\n\r\ndefine(\r\n  [\r\n    'components/flight/lib/component'\r\n  ],\r\n\r\n  function(defineComponent)  {\r\n\r\n    return defineComponent(mySimpleComponent);\r\n\r\n    function mySimpleComponent() {\r\n      this.doSomething = function() {\r\n        //...\r\n      }\r\n\r\n      this.doSomethingElse = function() {\r\n        //...\r\n      }\r\n    }\r\n  }\r\n);\r\n```\r\n\r\nComponents make no assumptions about the existence of other objects. If you were to remove all other\r\nJavaScript on the site, this component would still work as intended.\r\n\r\n### How do I attach a Component to a DOM node?\r\n\r\nEach Component constructor has an `attachTo` method which accepts two arguments. The first argument is a DOM\r\nnode (or a jQuery object or CSS selector representing one or more DOM nodes). The second is an `options` object.\r\nIf extra arguments are supplied, they are merged into the first options argument. These options will be merged\r\ninto the `defaults` object which is a property of the component instance.\r\n\r\nInvoking `attachTo` will create a new instance and attach it to the supplied DOM node. If the first argument\r\nresolves to one or more DOM nodes, an instance will be created for each node.\r\n\r\nHere we are creating an instance of an Inbox Component and attaching it to a node with id `inbox`. We're also\r\npassing in values for a couple of selectors which will override the values defined in the components `defaults`\r\nobject (if they exist). More on `defaults` [here](#defaults-and-options).\r\n\r\n```js\r\n/* attach an inbox component to a node with id 'inbox'*/\r\n\r\ndefine(\r\n  [\r\n    'components/inbox'\r\n  ],\r\n\r\n  function(Inbox) {\r\n    Inbox.attachTo('#inbox', {\r\n      'nextPageSelector': '#nextPage',\r\n      'previousPageSelector': '#previousPage',\r\n    });\r\n  }\r\n);\r\n```\r\n\r\nIt's important to understand that `attachTo` does not return the new instance, or any other value. You should\r\nnever need a reference to component instances - they should only respond to events.\r\n\r\n### Initializing a component\r\n\r\nWhen a component is created we usually want it to perform an initial setup routine. Every Component has an\r\nempty initialize method attached to its prototype and we can augment this method by supplying a function as\r\nan argument to a special `after` method. (We'll talk about `before`, `after` and `around` in detail in the\r\n[advice](#advice) section of this document).\r\n\r\nThe initialize function is a good place to set up event listeners that bind to callbacks.\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'components/flight/lib/component'\r\n  ],\r\n\r\n  function(defineComponent)  {\r\n\r\n    return defineComponent(inbox);\r\n\r\n    function inbox() {\r\n      //define custom functions here\r\n      //...\r\n\r\n      // now initialize the component\r\n      this.after('initialize', function() {\r\n        this.on('click', doThisThing);\r\n        this.on('mouseover', doThatThing);\r\n      });\r\n    }\r\n  }\r\n);\r\n```\r\n### Defaults and Options\r\n\r\nIn addition to functions, most components need to define attributes too. In Flight, default values are\r\nassigned by passing an object to the `defaultAttrs` function\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'flight/lib/component'\r\n  ],\r\n\r\n  function(defineComponent) {\r\n\r\n    return defineComponent(button);\r\n\r\n    function button() {\r\n      this.defaultAttrs({\r\n        buttonClass: 'js-button',\r\n        text: 'Click me'\r\n      });\r\n\r\n      this.after('initialize', function() {\r\n        //..\r\n      });\r\n    }\r\n\r\n  }\r\n);\r\n```\r\n\r\nThe object will be assigned to, or merged with, the `attr` property of the component and can be accessed\r\naccordingly:\r\n\r\n```js\r\nthis.after('initialize', function() {\r\n  this.$node\r\n      .addClass(this.attr.buttonClass)\r\n      .text(this.attr.text);\r\n});\r\n```\r\n\r\nThese can be overridden in options...\r\n\r\n```js\r\n/* attach button with text as option */\r\n\r\ndefine(\r\n  [\r\n    'components/button'\r\n  ],\r\n\r\n  function(Button) {\r\n    Button.attachTo(\"#foo\", {\r\n      text: \"Don't click me\",\r\n      buttonClass: \"js-not-a-button\"\r\n    });\r\n  }\r\n);\r\n```\r\n\r\n...or by [mixins](#overriding-defaults-in-a-mixin).\r\n\r\n### Finding elements\r\n\r\nFlight's `select` method takes a [selector attribute](#defaults-and-options) as its argument and will return\r\nall matching elements within the component's `node`. This is a handy alternative to jQuery's `this.$node.find()`\r\nand prevents accidental access to elements outside of `this.node`.\r\n\r\n```js\r\nthis.defaultAttrs({\r\n  menuItemSelector: '.menu-item',\r\n  selectedClass: 'selected'\r\n});\r\n\r\nthis.selectMenuItem = function(e) {\r\n  // toggle 'selected' class on all list items\r\n  this.select('menuItemSelector').toggleClass(this.attr.selectedClass);\r\n\r\n  //...\r\n};\r\n```\r\n\r\n### Interacting with the DOM\r\n\r\nOnce attached, component instances have direct access to their node object via the `node` property. (There's\r\nalso a jQuery version of the node available via the `$node` property.)\r\n\r\n### Events in Flight\r\n\r\nEvents are how Flight components interact. The Component prototype supplies methods for triggering events as\r\nwell as for subscribing to and unsubscribing from events. These Component event methods are actually just convenient\r\nwrappers around regular event methods on DOM nodes.\r\n\r\n#### Triggering events\r\n\r\nThe `trigger` method takes up to three arguments representing the triggering element, the event type (e.g.\r\n`'click'` or `'saveRequested'`) and the event payload which must always be an object. Only the event type is\r\nmandatory. If the element is not supplied then the component's `node` property is used.\r\n\r\n```js\r\nthis.saveButtonClicked = function() {\r\n  this.trigger('saveRequested', currentDocument);\r\n}\r\n\r\nthis.updateSuccessful = function() {\r\n  this.trigger(document, 'transactionComplete', successData);\r\n}\r\n```\r\n\r\nYou can also specify a default function that will be called by the component, providing nothing in the event's\r\nbubble chain invokes `preventDefault`. Default functions in custom events are analagous to the default actions\r\nof native events.\r\n\r\nTo define a default function, make the event argument an object that specifies the event type and a `defaultBehavior`\r\nproperty. A common use case is defining default behavior for keyboard events:\r\n\r\n```js\r\nthis.trigger('#textInput', {type: 'escapePressed', defaultBehavior: this.blur});\r\n```\r\n\r\n#### Subscribing to events\r\n\r\nA component instance can listen to an event and register a callback to be invoked using the `on` method of the\r\ncomponent prototype. There are three possible arguments: the DOM node to listen on, the event type to listen\r\nto, and the event handler (callback) to be invoked. Again the DOM node is optional and defaults to the component\r\ninstance's `node` value. Flight will automatically bind the context (`this`) of the callback to the component instance.\r\n\r\nThe callback argument can be either a function to be invoked...\r\n\r\n```js\r\nthis.after('initialize', function() {\r\n  this.on(document, 'dataSent', this.refreshList);\r\n  this.on('click', this.selectItem);\r\n});\r\n```\r\n\r\n...or an object that maps event targets to callbacks...\r\n\r\n```js\r\nthis.after('initialize', function() {\r\n  this.on('click', {\r\n    menuItemSelector: this.selectMenuItem,\r\n    saveButtonSelector: this.saveAll\r\n  });\r\n});\r\n```\r\n\r\nThe latter case is effectively event delegation; selector values are resolved, at event time, by keying into the `attr` property\r\nof the component (see [`defaults and options`](#defaults-and-options)).\r\nFor the above example we would expect the `defaultAttrs` call to look something like this:\r\n\r\n```js\r\nthis.defaultAttrs({\r\n  menuItemSelector: '.menuItem',\r\n  saveButtonSelector: '#save'\r\n});\r\n```\r\n\r\n#### Unsubscribing from events\r\n\r\nIf we no longer want a component instance to listen to an event we can use the `off` method to unsubscribe.\r\nThis method takes up to three arguments: the DOM node that was listening to the event, the event type, and the\r\ncallback. The DOM node argument is optional and defaults to the component's `node` property. The callback is\r\nalso optional and when not supplied the component instance detaches all callbacks for the event type.\r\n\r\n```js\r\nfunction disableAllDropdowns() {\r\n  this.off('#select', 'click');\r\n}\r\n\r\nfunction noHighlightOnHover() {\r\n  this.off('hover', this.highlight);\r\n}\r\n```\r\n\r\nNote: when a component is [torn down](#teardown), it automatically unsubscribes from all events.\r\n\r\n### Putting it together\r\n\r\nHere's an example of a navigation menu component.\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'flight/lib/component'\r\n  ],\r\n\r\n  function(defineComponent) {\r\n\r\n    return defineComponent(navigationMenu);\r\n\r\n    function navigationMenu() {\r\n      this.defaultAttrs({\r\n        menuItemSelector: '.menu-item',\r\n        selectedClass: 'selected'\r\n      });\r\n\r\n      // mark menu item as selected. mark others as not selected. trigger uiLoadUrl event\r\n      this.selectMenuItem = function(e) {\r\n        // toggle 'selected' class on all list items\r\n        this.select('menuItemSelector').toggleClass(this.attr.selectedClass);\r\n\r\n        // let some other component worry about loading the content & displaying it\r\n        this.trigger('uiLoadUrl', {\r\n          url: $(e.target).attr('href')\r\n        });\r\n      };\r\n\r\n      this.after('initialize', function() {\r\n        // 'menuItemSelector' is defined in defaultAttr\r\n        this.on('click', {\r\n          menuItemSelector: this.selectMenuItem\r\n        });\r\n      });\r\n    }\r\n\r\n  }\r\n);\r\n```\r\n\r\nWe can attach the component to a `ul.menu` element like the one below:\r\n\r\n```html\r\n<nav>\r\n  <ul class=\"menu\">\r\n    <li class=\"menu-item selected\">\r\n      <a href=\"apage.html\">A page</a>\r\n    </li>\r\n    <li class=\"menu-item\">\r\n      <a href=\"anotherpage.html\">Another page</a>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n```\r\n\r\nNow we have a simple menu component that can be attached to any element that has `.menu-item` children.\r\n\r\n## Teardown\r\n\r\nFlight provides a set of methods which remove components and their event bindings. It's a good idea to teardown\r\ncomponents after each unit test - and teardown is also good for unbinding event listeners when, for example, the user\r\nnavigates away from a page.\r\n\r\nThere are three levels of teardown:\r\n\r\n* On `defineComponent` (i.e. the object exported by `lib/component.js`) - deletes every instance of\r\nevery component and all their event bindings.\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'flight/lib/component'\r\n  ],\r\n\r\n  function(defineComponent) {\r\n\r\n    return defineComponent(navigationMenu);\r\n\r\n    function navigationMenu() {\r\n\r\n      this.resetEverything = function() {\r\n        //remove every component instance and all event listeners\r\n        defineComponent.teardownAll();\r\n      };\r\n      //..\r\n    }\r\n  }\r\n);\r\n```\r\n\r\n* On a Component constructor - deletes every instance of that Component type and all their event bindings.\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'ui/navigationMenu'\r\n  ],\r\n\r\n  function(NavigationMenu) {\r\n    //..\r\n    //remove all instances of NavigationMenu and all their event bindings\r\n    NavigationMenu.teardownAll();\r\n  }\r\n);\r\n```\r\n\r\n* On a component instance - deletes this instance and its event bindings\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'flight/lib/component'\r\n  ],\r\n\r\n  function(defineComponent) {\r\n\r\n    return defineComponent(videoPlayer);\r\n\r\n    function videoPlayer() {\r\n\r\n      this.closeVideoWidget = function() {\r\n        //remove this component instance and its event bindings\r\n        this.teardown();\r\n      };\r\n      //..\r\n    }\r\n  }\r\n);\r\n```\r\n\r\n## Mixins\r\n\r\n- In Flight, a mixin is a function which assigns properties to a target object (represented by the `this`\r\nkeyword).\r\n- A typical mixin defines a set of functionality that will be useful to more than one component.\r\n- One mixin can be applied to any number of [Component](#components) definitions.\r\n- One Component definition can have any number of mixins applied to it.\r\n- Each Component defines a [*core*](#core_mixin) mixin within its own module.\r\n- A mixin can itself have mixins applied to it.\r\n\r\n### How do I define a mixin?\r\n\r\nMixin definitions are like Component definitions but without the call to `defineComponent`.\r\n\r\n```js\r\n\r\ndefine(\r\n  [],\r\n\r\n  function() {\r\n\r\n    function withDropdown() {\r\n      this.openDropdown = function() {\r\n        //...\r\n      };\r\n      this.selectItem = function() {\r\n        //...\r\n      };\r\n    }\r\n\r\n    // return the mixin function\r\n    return withDropdown;\r\n  }\r\n);\r\n```\r\n\r\n### How do I apply mixins to a component?\r\n\r\nIn the Component definition, pass the required mixins as arguments to the `defineComponent` function:\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'flight/lib/component',\r\n    'mixins/with_dialog',\r\n    'mixins/with_dropdown'\r\n  ],\r\n\r\n  function(defineComponent, withDialog, withDropdown) {\r\n\r\n    defineComponent(fancyComponent, withDialog, withDropdown);\r\n\r\n    function fancyComponent() {\r\n      //...\r\n    }\r\n  }\r\n);\r\n```\r\n\r\n### How do I apply mixins to a regular object?\r\n\r\nUnder the covers, Components add mixins using Flight's `compose` module, which amongst other things, prevents\r\nmixins from clobbering existing method names. If you ever need to apply a mixin to something other than a\r\ncomponent (e.g. to another mixin), you can invoke `compose.mixin` directly:\r\n\r\n```js\r\ndefine(\r\n  [\r\n    'mixins/with_positioning',\r\n    'lib/compose'\r\n  ],\r\n\r\n  function(withPositioning, compose) {\r\n\r\n    function withDialog() {\r\n      //mix withPositioning into withDialog\r\n      compose.mixin(this, [withPositioning]);\r\n\r\n      //...\r\n    }\r\n\r\n    // return the mixin function\r\n    return withDialog;\r\n  }\r\n);\r\n```\r\n\r\n### Overriding defaults in a mixin\r\n\r\nThe `defaultAttr` method is available to both component and mixin modules. When used with mixins it will not\r\noverwrite attributes already defined in the component module.\r\n\r\n```js\r\n/* mixins/big_button */\r\n\r\ndefine(\r\n  [],\r\n\r\n  function() {\r\n\r\n    function bigButton() {\r\n      this.defaultAttrs({\r\n        buttonClass: 'js-button-big'\r\n      });\r\n    }\r\n\r\n    return bigButton;\r\n\r\n  }\r\n);\r\n```\r\n## Advice\r\n\r\nIn Flight, advice is a mixin (`'lib/advice.js'`) that defines `before`, `after` and `around` methods.\r\n\r\nThese can be used to modify existing functions by adding custom code. All Components have advice mixed in to\r\ntheir prototype so that mixins can augment existing functions without requiring knowledge\r\nof the original implementation. Moreover, since Component's are seeded with an empty `initialize` method,\r\nComponent definitions will typically use `after` to define custom `initialize` behavior.\r\n\r\n### before and after\r\n\r\nYou can add custom code before or after an existing method by calling the respective advice function with two\r\narguments. The first is the name of the function you want to augment, the second is a custom function to be\r\ninvoked before or after the original:\r\n\r\n```js\r\ndefine(\r\n  [],\r\n\r\n  function() {\r\n\r\n    function withDrama() {\r\n      this.before('announce', function() {\r\n        clearThroat();\r\n      });\r\n      this.after('leaving', function() {\r\n        slamDoor();\r\n      });\r\n    }\r\n\r\n    return withDrama;\r\n  }\r\n);\r\n```\r\n\r\n### around\r\n\r\nThis method is similar to `before` and `after` but allows the existing function to be invoked in the middle of\r\nyour custom code (it's similar to [underscore](http://underscorejs.org/)'s `_wrap` function). Again the first argument is the existing function\r\nwhile the second is the custom function to go around it. The existing function will be passed to the custom\r\nfunction as an argument so that it can be referenced. If the custom function does not call the existing function\r\nthen it will replace that function instead of surround it:\r\n\r\n```js\r\ndefine(\r\n  [],\r\n\r\n  function() {\r\n\r\n    function withDrama() {\r\n      this.around('announce', function(basicAnnounce) {\r\n        clearThroat();\r\n        basicAnnounce();\r\n        bow();\r\n      });\r\n    }\r\n\r\n    return withDrama;\r\n  }\r\n);\r\n```\r\n\r\n### Making advice available to regular objects\r\n\r\nAdvice can be mixed in to non-components using the compose module:\r\n\r\n```js\r\n//a simple module: 'test/myObj'\r\ndefine(\r\n  [],\r\n\r\n  function() {\r\n    var myObj = {\r\n      print: function() {\r\n        console.log(\"hello\");\r\n      }\r\n    };\r\n\r\n    return myObj;\r\n  }\r\n);\r\n\r\n//import myObj and augment it\r\ndefine(\r\n  [\r\n    'lib/advice',\r\n    'lib/compose',\r\n    'test/myObj'\r\n  ],\r\n\r\n  function(advice, compose, myObj) {\r\n\r\n    //add advice functions to myObj\r\n    compose.mixin(myObj, [advice.withAdvice]);\r\n\r\n    //augment print function\r\n    myObj.after('print', function() {\r\n      console.log(\"world\");\r\n    });\r\n  }\r\n);\r\n```\r\n\r\n## Using the standalone version\r\n\r\nThe [standalone version](http://twitter.github.com/flight/flight.js) of flight.js does not require a module loader such as require.js and instead exposes all of its modules as properties of a global variable, flight:\r\n\r\n```html\r\n<script src='jquery.js'></script>\r\n<script src='es5-shim.js'></script>\r\n<script src='es5-sham.js'></script>\r\n<script src='flight.js'></script>\r\n<script>\r\nvar MyComponent = flight.component(function() {\r\n  this.after('initialize', function() {\r\n    // ...\r\n  });\r\n});\r\n\r\nMyComponent.attachTo('.thing');\r\n</script>\r\n```\r\n\r\n\r\n## Debugging\r\n\r\nFlight ships with a debug module which can help you trace the sequence of event triggering and binding. By default\r\nconsole logging is turned off, but you can you can log `trigger`, `bind` and `unbind` events by means of the following console\r\ncommands:\r\n\r\n    DEBUG.events.logAll(); //log everything\r\n    DEBUG.events.logByAction('trigger'); //only log event triggers\r\n    DEBUG.events.logByName('click'); //only log events named 'click' - accepts * as wildcard\r\n    DEBUG.events.logNone(); //log nothing\r\n\r\nIf you want to log everything by default, update the following line in [tools/debug.js](https://github.com/twitter/flight/blob/master/tools/debug/debug.js)\r\n\r\n    var logLevel = [];\r\n\r\nto\r\n\r\n    var logLevel = 'all';\r\n\r\n## Authors\r\n\r\n+ [@angus-c](http://github.com/angus-c)\r\n+ [@danwrong](http://github.com/danwrong)\r\n+ [@kpk](http://github.com/kennethkufluk)\r\n\r\nThanks for assistance and contributions:\r\n\r\n+ [@sayrer](https://github.com/sayrer)\r\n+ [@shinypb](https://github.com/shinypb)\r\n+ [@kloots](https://github.com/kloots)\r\n+ [@marcelduran](https://github.com/marcelduran)\r\n+ [@tbrd](https://github.com/tbrd)\r\n+ [@necolas](https://github.com/necolas)\r\n+ [@fat](https://github.com/fat)\r\n+ [@mkuklis](https://github.com/mkuklis)\r\n+ [@jrburke](https://github.com/jrburke)\r\n+ [@garann](https://github.com/garann)\r\n+ [@WebReflection](https://github.com/WebReflection)\r\n+ [@coldhead](https://github.com/coldhead)\r\n+ [@paulirish](https://github.com/paulirish)\r\n+ [@nimbupani](https://github.com/nimbupani)\r\n+ [@mootcycle](https://github.com/mootcycle)\r\n\r\nSpecial thanks to the rest of the Twitter web team for their abundant contributions and feedback.\r\n\r\n## License\r\n\r\nCopyright 2013 Twitter, Inc and other contributors.\r\n\r\nLicensed under the MIT License\r\n",
  "readmeFilename": "README.md",
  "_id": "flight@1.0.7",
  "repository": {
    "type": "git",
    "url": "git://github.com/twitter/flight"
  }
}